Question # 01 ;

You can use the replace() method to replace any word in a string with a different word. Here’s a quick example showing how to replace 'dog' with 'cat' in a sentence

sentence = "The dog chased the dog around the yard."
new_sentence = sentence.replace('dog', 'cat')
print(new_sentence)

Question # 02 ;

Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.

# Prompt the user for their name
name = input("What is your name? ")

# Open the file guest.txt in write mode and save the name
with open('guest.txt', 'w') as file:
    file.write(name)

print(f"Thanks, {name}! Your name has been saved.")

Question #03 ;

Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.

# Prompt the user for their name
name = input("What is your name? ")

# Write the name to guest.txt
with open("guest.txt", "w") as file:
    file.write(name)

print("Your name has been written to guest.txt.")

Question # 04 ;


Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file


while True:
    name = input("Enter your name (or type 'quit' to exit): ")

    if name.lower() == 'quit':
        break

    print(f"Hello, {name}! Welcome!")
    
    # Append the name to guest_book.txt
    with open("guest_book.txt", "a") as file:
        file.write(f"{name} visited.\n")

Question #05 ;

Write a while loop that asks people why they like 
programming. Each time someone enters a reason, add their reason to a file 
that stores all the responses.

while True:
    reason = input("Why do you like programming? (Type 'quit' to exit): ")

    if reason.lower() == 'quit':
        break

    # Append the reason to programming_reasons.txt
    with open("programming_reasons.txt", "a") as file:
        file.write(reason + "\n")

Question # 06 ;

common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you’ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.

try:
    num1 = input("Enter the first number: ")
    num2 = input("Enter the second number: ")

    # Convert input to integers
    result = int(num1) + int(num2)

except ValueError:
    print("Oops! Please enter valid numbers only.")

else:
    print(f"The sum of {num1} and {num2} is {result}.")

Question #07 ;

Wrap your code from Exercise 10-6 in a while loop 
so the user can continue entering numbers even if they make a mistake and 
enter text instead of a number.

print("Enter two numbers to add them together.")
print("Type 'quit' at any time to exit.\n")

while True:
    num1 = input("Enter the first number: ")
    if num1.lower() == 'quit':
        break

    num2 = input("Enter the second number: ")
    if num2.lower() == 'quit':
        break

    try:
        result = int(num1) + int(num2)
    except ValueError:
        print("Oops! You need to enter valid numbers.\n")
    else:
        print(f"The sum of {num1} and {num2} is {result}.\n")

Question # 08 ;

Make two files, cats.txt and dogs.txt. Store at least three 
names of cats in the first file and three names of dogs in the second file. Write 
a program that tries to read these files and print the contents of the file to the 
screen. Wrap your code in a try-except block to catch the FileNotFound error, 
and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the except block 
executes properly.

filenames = ['cats.txt', 'dogs.txt']

for filename in filenames:
    try:
        with open(filename) as file:
            print(f"\nContents of {filename}:")
            contents = file.read()
            print(contents.strip())
    except FileNotFoundError:
        print(f"\nSorry, the file {filename} was not found.")

Question #09 ;

Modify your except block in Exercise 10-8 to fail silently if either file is missing.


filenames = ['cats.txt', 'dogs.txt']

for filename in filenames:
    try:
        with open(filename) as file:
            print(f"\nContents of {filename}:")
            contents = file.read()
            print(contents.strip())
    except FileNotFoundError:
        pass  # Fail silently if the file is missing