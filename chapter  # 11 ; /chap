question # o1;
Write a function that accepts two parameters: a city name
and a country name. The function should return a single string of the form
City, Country, such as Santiago, Chile. Store the function in a module called
city_functions.py.
Create a file called test_cities.py that tests the function you just wrote
(remember that you need to import unittest and the function you want to test).
Write a method called test_city_country() to verify that calling your function
with values such as 'santiago' and 'chile' results in the correct string. Run
test_cities.py, and make sure test_city_country() passes

# city_functions.py

def city_country(city, country):
    """Return a neatly formatted city and country."""
    return f"{city.title()}, {country.title()}"
# test_cities.py

import unittest
from city_functions import city_country

class CityCountryTestCase(unittest.TestCase):
    """Tests for the city_country function."""

    def test_city_country(self):
        """Do city and country like 'santiago, chile' work?"""
        formatted = city_country('santiago', 'chile')
        self.assertEqual(formatted, 'Santiago, Chile')

if __name__ == '__main__':
    unittest.main()
python test_cities.py

question # 02 ;
Modify your function so it requires a third parameter,
population. It should now return a single string of the form City, Country –
population xxx, such as Santiago, Chile – population 5000000. Run test
_cities.py again. Make sure test_city_country() fails this time.
Modify the function so the population parameter is optional. Run test
_cities.py again, and make sure test_city_country() passes again.
Write a second test called test_city_country_population() that verifies you can call your function with the values 'santiago', 'chile', and
'population=5000000'. Run test_cities.py again, and make sure this new test
passes.
# city_functions.py

def city_country(city, country, population):
    """Return a formatted string like 'City, Country – population xxx'."""
    return f"{city.title()}, {country.title()} – population {population}"
# city_functions.py

def city_country(city, country, population=None):
    """Return a formatted string like 'City, Country' or 'City, Country – population xxx'."""
    if population:
        return f"{city.title()}, {country.title()} – population {population}"
    else:
        return f"{city.title()}, {country.title()}"
# test_cities.py

import unittest
from city_functions import city_country

class CityCountryTestCase(unittest.TestCase):
    """Tests for the city_country function."""

    def test_city_country(self):
        """Test city and country only."""
        formatted = city_country('santiago', 'chile')
        self.assertEqual(formatted, 'Santiago, Chile')

    def test_city_country_population(self):
        """Test city, country, and population."""
        formatted = city_country('santiago', 'chile', population=5000000)
        self.assertEqual(formatted, 'Santiago, Chile – population 5000000')

if __name__ == '__main__':
    unittest.main()

Question #3 ;
 Write a class called Employee. The __init__() method should
take in a first name, a last name, and an annual salary, and store each of these
as attributes. Write a method called give_raise() that adds $5,000 to the
annual salary by default but also accepts a different raise amount.
Write a test case for Employee. Write two test methods, test_give_default
_raise() and test_give_custom_raise(). Use the setUp() method so you don’t
have to create a new employee instance in each test method. Run your test
case, and make sure both tests pass

# employee.py

class Employee:
    def __init__(self, first_name, last_name, annual_salary):
        self.first_name = first_name
        self.last_name = last_name
        self.annual_salary = annual_salary

    def give_raise(self, amount=5000):
        """Add the specified raise amount to the annual salary (default is $5,000)."""
        self.annual_salary += amount
# test_employee.py

import unittest
from employee import Employee

class TestEmployee(unittest.TestCase):
    def setUp(self):
        """Create an employee for use in all test methods."""
        self.emp = Employee('John', 'Doe', 50000)

    def test_give_default_raise(self):
        """Test default raise of $5,000."""
        self.emp.give_raise()
        self.assertEqual(self.emp.annual_salary, 55000)

    def test_give_custom_raise(self):
        """Test a custom raise amount."""
        self.emp.give_raise(10000)
        self.assertEqual(self.emp.annual_salary, 60000)

if __name__ == '__main__':
    unittest.main()
python test_employee.py
